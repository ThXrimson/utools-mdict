// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

export class KeyWordItem {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): KeyWordItem {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsKeyWordItem(
    bb: flatbuffers.ByteBuffer,
    obj?: KeyWordItem
  ): KeyWordItem {
    return (obj || new KeyWordItem()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  static getSizePrefixedRootAsKeyWordItem(
    bb: flatbuffers.ByteBuffer,
    obj?: KeyWordItem
  ): KeyWordItem {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new KeyWordItem()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    )
  }

  recordStartOffset(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0
  }

  recordEndOffset(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0
  }

  keyText(): string | null
  keyText(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  keyText(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  keyBlockIdx(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0
  }

  static startKeyWordItem(builder: flatbuffers.Builder) {
    builder.startObject(4)
  }

  static addRecordStartOffset(
    builder: flatbuffers.Builder,
    recordStartOffset: number
  ) {
    builder.addFieldInt32(0, recordStartOffset, 0)
  }

  static addRecordEndOffset(
    builder: flatbuffers.Builder,
    recordEndOffset: number
  ) {
    builder.addFieldInt32(1, recordEndOffset, 0)
  }

  static addKeyText(
    builder: flatbuffers.Builder,
    keyTextOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(2, keyTextOffset, 0)
  }

  static addKeyBlockIdx(builder: flatbuffers.Builder, keyBlockIdx: number) {
    builder.addFieldInt32(3, keyBlockIdx, 0)
  }

  static endKeyWordItem(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createKeyWordItem(
    builder: flatbuffers.Builder,
    recordStartOffset: number,
    recordEndOffset: number,
    keyTextOffset: flatbuffers.Offset,
    keyBlockIdx: number
  ): flatbuffers.Offset {
    KeyWordItem.startKeyWordItem(builder)
    KeyWordItem.addRecordStartOffset(builder, recordStartOffset)
    KeyWordItem.addRecordEndOffset(builder, recordEndOffset)
    KeyWordItem.addKeyText(builder, keyTextOffset)
    KeyWordItem.addKeyBlockIdx(builder, keyBlockIdx)
    return KeyWordItem.endKeyWordItem(builder)
  }
}
