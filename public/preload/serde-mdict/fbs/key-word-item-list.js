"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyWordItemList = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
const key_word_item_1 = require("./key-word-item");
class KeyWordItemList {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsKeyWordItemList(bb, obj) {
        return (obj || new KeyWordItemList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsKeyWordItemList(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new KeyWordItemList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    items(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new key_word_item_1.KeyWordItem()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb)
            : null;
    }
    itemsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startKeyWordItemList(builder) {
        builder.startObject(1);
    }
    static addItems(builder, itemsOffset) {
        builder.addFieldOffset(0, itemsOffset, 0);
    }
    static createItemsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startItemsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endKeyWordItemList(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishKeyWordItemListBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedKeyWordItemListBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createKeyWordItemList(builder, itemsOffset) {
        KeyWordItemList.startKeyWordItemList(builder);
        KeyWordItemList.addItems(builder, itemsOffset);
        return KeyWordItemList.endKeyWordItemList(builder);
    }
}
exports.KeyWordItemList = KeyWordItemList;
