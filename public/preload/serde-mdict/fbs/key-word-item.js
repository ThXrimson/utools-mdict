"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyWordItem = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
class KeyWordItem {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsKeyWordItem(bb, obj) {
        return (obj || new KeyWordItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsKeyWordItem(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new KeyWordItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    recordStartOffset() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    recordEndOffset() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    keyText(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset
            ? this.bb.__string(this.bb_pos + offset, optionalEncoding)
            : null;
    }
    keyBlockIdx() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    static startKeyWordItem(builder) {
        builder.startObject(4);
    }
    static addRecordStartOffset(builder, recordStartOffset) {
        builder.addFieldInt32(0, recordStartOffset, 0);
    }
    static addRecordEndOffset(builder, recordEndOffset) {
        builder.addFieldInt32(1, recordEndOffset, 0);
    }
    static addKeyText(builder, keyTextOffset) {
        builder.addFieldOffset(2, keyTextOffset, 0);
    }
    static addKeyBlockIdx(builder, keyBlockIdx) {
        builder.addFieldInt32(3, keyBlockIdx, 0);
    }
    static endKeyWordItem(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createKeyWordItem(builder, recordStartOffset, recordEndOffset, keyTextOffset, keyBlockIdx) {
        KeyWordItem.startKeyWordItem(builder);
        KeyWordItem.addRecordStartOffset(builder, recordStartOffset);
        KeyWordItem.addRecordEndOffset(builder, recordEndOffset);
        KeyWordItem.addKeyText(builder, keyTextOffset);
        KeyWordItem.addKeyBlockIdx(builder, keyBlockIdx);
        return KeyWordItem.endKeyWordItem(builder);
    }
}
exports.KeyWordItem = KeyWordItem;
